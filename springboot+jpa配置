1.配置文件
pom.xml里加入spring-boot-starter-data-jpa以及mysql-connector-java的依赖

2.application.properties里加入hibernate、jpa的配置，以及返回json对日期字段的特殊处理配置，注意time-zone的设置，
须与mysql的url配置一致，否则会引起时间相差8小时的问题。jpa里的show-sql作用，如果设置为true，执行程序后可
以看在控制台里看到sql语句，如下所示。
    #配置连接mysql数据库
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://localhost:3306/mybatis_db?charset=utf8mb4&serverTimezone=UTC
    spring.datasource.username=root
    spring.datasource.password=tonyyan
    #配置tomcat数据源
    spring.datasource.tomcat.max-active=20
    spring.datasource.tomcat.test-while-idle=true
    spring.datasource.tomcat.validation-query=select 1
    spring.datasource.tomcat.default-auto-commit=false
    spring.datasource.tomcat.min-idle=15
    spring.datasource.tomcat.initial-size=15
    #配置表更新
    spring.jpa.hibernate.ddl-auto=update
    #sql可见
    spring.jpa.show-sql=true
    spring.jackson.serialization.indent-output=true


3.分层
    　为了区别各个模块，为项目建立几个包：controller、Entity、respository、service，这是典型的MVC架构，
      各个层次的代表意义在此不再赘述。

4.Respository层：spring data jpa让我们解脱了DAO层的操作，基本上所有CRUD都可以依赖于它来实现，需要实现JpaRepository接口
    jpa实现JpaRepository是面向接口编程，不需要有实现类
        @Repository
        public interface UserDao extends JpaRepository<User,Long> {
            //获得所有的用户信息
            List<User> findAll();
        }

    Spring提供了非常大的自由度给开发者，我们可以在接口方法中通过定义@Query annotation自定义接口方法的JPQL语句
    public interface WeiboRepository extends JpaRepository<Weibo,Long>,JpaSpecificationExecutor<Weibo> {

        @Query("select w from Weibo w where w.user.username = :username")
        List<Weibo> searchUserWeibo(@Param("username") String username);
        @Modifying
        @Transactional(readOnly = false)
        @Query("update Weibo w set w.weiboText = :text where w.user = :user")
        int setUserWeiboContent(@Param("text")String weiboText,@Param("user")User user);

    Sort提供字段排序的功能，而Pageable则提供分页的功能。需要注意的是，如果使用了Pageable返回值是Page<T>的泛型对象，
    这个对象里面提供的分页信息相当丰富。足够使用。只要方法有Pageable参数就会自动实现分页，同时将总页面数和总对象数等
    信息都通过page对象一一返回。

        public List<Weibo> getUserWeibo(@PathVariable("username") String username) {
            return this.weiboRepository.searchUserWeibo(username,new Sort(new Sort.Order(Sort.Direction.DESC,"weiboId")));
        }

    @Query不止是查询语言也可以用于更新和删除语句，不过需要额外添加@Modifying annotation
        @Modifying
        @Transactional(readOnly = false)
        @Query("update Weibo w set w.weiboText = :text where w.user = :user")
        int setUserWeiboContent(@Param("text")String weiboText,@Param("user")User user);

    @Query annotation 还可以在Entity类中使用@NamedQuery，定义查询语句
        @Entity
        @Table(name = "users")
        @NamedQuery(name = "User.searchUserName",query = "select u from User u where u.username like :username")
        public class User {}

        然后UserRepository接口定义searchUserName方法即可：
        public interface UserRepository extends JpaRepository<User,Long> {
            List<User> searchUserName(@Param("username") String username);
        }
    当然我们可以使用最为基础的方法去写DAO。直接@Repository 然后@PersistenceContext。最原始最基本~
         StringBuffer jpql = new StringBuffer("select w from Weibo w join fetch w.user u left join fetch w.comments c where 1=1 ");
         jpql.append(" and u.username = :username");
         Query query = entityManager.createQuery(jpql.toString());
         query.setParameter(keyItem,paramMap.get(keyItem));
         query.setFirstResult(pageNo*pageSize).setMaxResults(pageSize).getResultList();

    声明式事务
         @Transactional(readOnly = false,isolation = Isolation.READ_COMMITTED)
         public List<Weibo> importWeiboList(List<Weibo> weibos, User user){}

5.Entity层
    示例：定义了用户信息表实体UserInfo，通过Hibernate与数据库形成映射关系，
    package com.lujie.jpa.entity;

    import org.springframework.stereotype.Component;

    import javax.persistence.Column;
    import javax.persistence.Entity;
    import javax.persistence.Id;
    import javax.persistence.Table;

    @Entity
    @Table(name="c_user")
    @Component
    public class User {
        //用户编号
        @Id
        @Column(name = "cu_id",columnDefinition = "BIGINT(20) comment '用户编号'")
        private Long uId;
        //用户名
        @Column(name = "cu_name",columnDefinition = "varchar(30) comment '用户姓名'",unique = true)
        private String uName;
        //密码
        @Column(name = "cu_pwd",columnDefinition = "varchar(30) comment '用户密码'")
        private String uPwd;
        //权限编号
        @Column(name = "cr_id",columnDefinition = "BIGINT(20) comment '用户权限编号'")
        private Long roleId;
    }